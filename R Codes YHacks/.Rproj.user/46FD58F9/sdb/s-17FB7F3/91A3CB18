{
    "collab_server" : "",
    "contents" : "library(mongolite)\nlibrary(twitteR)\nlibrary(stringr)\nlibrary(tm)\nlibrary(plyr)\nlibrary(rjson)\nlibrary(httr)\nlibrary(RJSONIO) \n\nmongoURLLocal<-\"mongodb://localhost\"\n\nusers <- mongo(collection = \"users\", db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\nuser_names <- mongo(collection = \"user_info\", db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\ncurrentDate<-Sys.Date()\n\nmonth<-format(currentDate,\"%m\")\nyear<-format(currentDate,\"%Y\")\n\n\n###########################################Financial data###############################################\n\nupdate_bank_summary <- function(name) {\n  account <- mongo(collection = name, db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  \n  each_bank_balance <- account$aggregate( \n    \n    '[{\"$match\":{\"account_number\": { \"$exists\": true}}},{\"$group\":{\"_id\":\"$bank_name\", \"balance\": {\"$last\":\"$balance\"}}}]' \n    \n  )\n  \n  print(each_bank_balance)\n  \n  if(dim(each_bank_balance)[1] > 0 && dim(each_bank_balance)[2] > 0)\n  {\n    sum = 0\n    for(balance in each_bank_balance[,2]) {\n      sum <- sum + balance\n    }\n    no_of_accounts <- dim(each_bank_balance)[1]\n    print(no_of_accounts)\n    users$update(query = paste0('{\"name\":\"', name,'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"no_of_accounts\": ', no_of_accounts, '}}'))\n    \n  }\n  \n  each_accounts_balance <- account$aggregate( \n    \n    '[{\"$match\":{\"account_number\": { \"$exists\": true}}},{\"$group\":{\"_id\":\"$account_number\", \"balance\": {\"$last\":\"$balance\"}}}]' \n    \n  )\n  if(dim(each_accounts_balance)[1] > 0 && dim(each_accounts_balance)[2] > 0)\n  {\n    sum = 0\n    for(balance in each_accounts_balance[,2]) {\n      sum <- sum + balance\n    }\n    users$update(query = paste0('{\"name\":\"', name, '\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"total_bank_balance\": ', sum, '}}'))\n    no_of_accounts <- dim(each_accounts_balance)[1]\n    print(no_of_accounts)\n    users$update(query = paste0('{\"name\":\"', name, '\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"no_of_accounts\": ', no_of_accounts, '}}'))\n  }\n}\n\n\n\n##################################3\n\n\nupdate_banks <- function(name) {\n  account <- mongo(collection = name , db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  each_account_credit_summary <- account$aggregate( \n    \n    paste0('[ {\"$match\": {\"account_number\": { \"$exists\": true}, \"type\":\"credit\", \"month\" : ', as.integer(month) , ',\"year\" :', year, '}},\n           {\"$group\":{\"_id\":{\"account_number\":\"$account_number\"}, \"amount\": {\"$sum\":\"$amount\"}, \"number_of_transcations\": {\"$sum\":1} }}]')\n    )\n  each_account_debit_summary <- account$aggregate( \n    \n    paste0('[ {\"$match\": {\"account_number\": { \"$exists\": true}, \"type\":\"debit\", \"month\" : ', as.integer(month) , ',\"year\" :', year, '}},\n           {\"$group\":{\"_id\":{\"account_number\":\"$account_number\"}, \"amount\": {\"$sum\":\"$amount\"}, \"number_of_transcations\": {\"$sum\":1} }}]')\n    )\n  each_account_balance_bankname <- account$aggregate(\n    '\n    [ {\"$match\": {\"account_number\": { \"$exists\": true}}},\n    {\"$group\":{\"_id\":{\"account_number\":\"$account_number\"}, \"balance\": {\"$last\":\"$balance\"},\"bank_name\": {\"$last\":\"$bank_name\"} }}]\n    '\n  )\n  \n  bank_collection_name <- paste(name,\"_summary\",sep=\"\")\n  summary_col <- mongo(collection = bank_collection_name, db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  \n  #print(each_account_balance_bankname)\n  #print(each_account_credit_summary)\n  #print(each_account_debit_summary)\n  nrows <- nrow(each_account_balance_bankname)\n  for(i in 1:nrows){\n    \n    account_number <- each_account_balance_bankname[i,1]\n    balance <- each_account_balance_bankname[i,2]\n    bank_name <-  each_account_balance_bankname[i,3]\n    \n    summary_col$update(query = paste0('{\"account_number\":\"', account_number[[1]],'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"type\" : \"account\", \"balance\": ', balance , ',\"bank_name\":\"', bank_name,'\"}}'), upsert = TRUE)\n    \n  }\n  \n  nrows <- nrow(each_account_credit_summary)\n  if(nrows > 0) {\n    for(i in 1:nrows){\n      \n      account_number <- each_account_credit_summary[i, 1]\n      credit_amount <- each_account_credit_summary[i,2]\n      credit_no_of_transactions <- each_account_credit_summary[i,3]\n      #print(account_number)\n      #print(credit_no_of_transactions)\n      \n      summary_col$update(query = paste0('{\"account_number\":\"', account_number[[1]],'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"total_credit_amount\": ', credit_amount , ',\"total_credit_transactions\":', credit_no_of_transactions,'}}'), upsert = TRUE)\n      \n    }\n  }\n  nrows <- nrow(each_account_debit_summary)\n  if(nrows > 0) {\n    for(i in 1:nrows){\n      \n      account_number <- each_account_debit_summary[i, 1]\n      debit_amount <- each_account_debit_summary[i,2]\n      debit_no_of_transactions <- each_account_debit_summary[i,3]\n      #print(account_number)\n      #print(credit_no_of_transactions)\n      \n      summary_col$update(query = paste0('{\"account_number\":\"', account_number[[1]],'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"total_debit_amount\": ', debit_amount , ',\"total_debit_transactions\":', debit_no_of_transactions,'}}'), upsert = TRUE)\n      \n    }\n  }\n  \n}\n\n\n\n\nupdate_finance_credit_debit <- function(name, twitter_handle) {\n  #users$update( query = paste0('{\"name\":\"', name,'\"}'), update = paste0('{\"$set\":{\"tweets_sentiment\": ', get_tweets_sentiment(twitter_handle), '}}'))\n  account <- mongo(collection = name, db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  \n  transactions_info_credit <- account$aggregate(\n    \n    paste0( '[{\"$match\":{\"type\":\"credit\", \"month\" : ', as.integer(month) , ',\"year\" :', year, '}},{\"$group\":{\"_id\":\"$type\", \"count\": {\"$sum\":1}, \"amount\":{\"$sum\":\"$amount\"},\"average\":{\"$avg\":\"$amount\"}}}]' )\n    \n  )\n  #, \"month\" : \"10\", \"year\" : \"2016\"\n  transactions_info_debit <- account$aggregate(\n    paste0( '[{\"$match\":{\"type\":\"debit\", \"month\" : ', as.integer(month) , ',\"year\" :', year, '}},{\"$group\":{\"_id\":\"$type\", \"count\": {\"$sum\":1}, \"amount\":{\"$sum\":\"$amount\"},\"average\":{\"$avg\":\"$amount\"}}}]' )\n  )\n  users$update(query = paste0('{\"name\":\"', name, '\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"twitter_handle\":\"', twitter_handle, '\"}}'), upsert = TRUE)\n  \n  if(dim(transactions_info_credit)[1] > 0 && dim(transactions_info_credit)[2] > 0)\n  {\n    users$update(query = paste0('{\"name\":\"', name, '\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"number_transactions_credit\": ', transactions_info_credit[2], '}}'), upsert = TRUE)\n    users$update(query = paste0('{\"name\":\"', name, '\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"totalamount_transactions_credit\": ', transactions_info_credit[3], '}}'), upsert = TRUE)\n    users$update(query = paste0('{\"name\":\"', name, '\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"averageamount_transactions_credit\": ', as.integer(transactions_info_credit[4]), '}}'), upsert = TRUE)\n    \n  }\n  if(dim(transactions_info_debit)[1] > 0 && dim(transactions_info_debit)[2] > 0)\n  {\n    users$update(query = paste0('{\"name\":\"', name,'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"averageamount_transactions_debit\": ', as.integer(transactions_info_debit[4]), '}}'), upsert = TRUE)\n    users$update(query = paste0('{\"name\":\"', name,'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"number_transactions_debit\": ', transactions_info_debit[2], '}}'), upsert = TRUE)\n    users$update(query = paste0('{\"name\":\"', name,'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"totalamount_transactions_debit\": ', transactions_info_debit[3], '}}'), upsert = TRUE)\n  }\n}\n\n\n\n\n\nupdate_location_data <- function(name) {\n  account <- mongo(collection = name, db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  city_not_fetched <- account$aggregate(\n    '\n    [{\"$match\":{\"type\":\"location\", \"country\": {\"$exists\": false}}}]\n    '\n  )\n  \n  if(dim(city_not_fetched)[1] > 0 && dim(city_not_fetched)[2] > 0)\n  {\n    nrows <- nrow(city_not_fetched)\n    for(i in 1:nrows){\n      \n      print(city_not_fetched)\n      \n      latitude <- city_not_fetched[i,3]\n      longitude <- city_not_fetched[i,4]\n      \n      latlon <- paste(latitude,',',longitude,sep=\"\")\n      print(latlon)\n      \n      API_Key <- \"AIzaSyAZI9adLQIuSi2-YESdSwlqJj087KH3DrU\"\n      #Google Maps API key skylinelabs account  AIzaSyAZI9adLQIuSi2-YESdSwlqJj087KH3DrU\n      \n      \n      connectStr <- paste(\"https://maps.google.com/maps/api/geocode/json?key=\",API_Key,\"&latlng=\",latlon, sep=\"\")\n      con <- url(connectStr)\n      data.json <- fromJSON(paste(readLines(con), collapse=\"\"))\n      close(con)\n      \n      #print(data.json)\n      \n      country <- \"\"\n      city <- \"\"\n      i <- 0\n      \n      nrows <- lengths(data.json)\n      for(i in 1:nrows){\n        type <- data.json$results[[i]]$types[1]\n        if(identical(type,\"country\")){\n          country <- data.json$results[[i]]$address_components[[1]]$long_name[1]\n          print(country)\n        }\n        \n        if(identical(type,\"locality\")){\n          city <- data.json$results[[i]]$address_components[[2]]$long_name[1]\n          print(city)\n        }\n        \n        if(identical(city,\"\")){\n          city <- data.json$results[[i]]$address_components[[3]]$long_name[1]\n          print(city)\n        }\n      }\n      \n      \n      \n      query <- account$update(query = paste0('{\"latitude\":', latitude,',\"longitude\":',longitude,'}'), update = paste0('{\"$set\":{\"city\":\"', city, '\",\"country\":\"',country,'\"}}'), upsert=TRUE,  multiple=TRUE )\n      #m <- mongo(collection = bank_collection_name, db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n      #m$update(query = paste0('{\"account_number\":\"', account_number,'\",\"type\":\"',transaction_type,'\"}'), update = paste0('{\"$set\":{\"amount\": ', amount, ',\"transactions_number\":', numer_of_transactions, ',\"balance\":', balance, ',\"bank_name\":\"', bank,'\"}}'),upsert = TRUE)\n    }\n  }\n}\n\nupdate_summary_location_data <- function (name) {\n  collection_name <- paste(name,\"_summary\",sep=\"\")\n  summary_collection <- mongo(collection = collection_name, db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  \n  name_collection <- mongo(collection = name, db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  city_wise_location <- name_collection$aggregate( \n    \n    paste0('[ {\"$match\": {\"type\":\"location\", \"month\" : ', as.integer(month) , ',\"year\" :', year, '}},\n           {\"$group\":{\"_id\":{\"city\":\"$city\", \"country\":\"$country\"}, \"number\": {\"$sum\":1} }}]')\n    )\n  print(city_wise_location)\n  nrows <- nrow(city_wise_location)\n  if(nrows > 0) {\n    for(i in 1:nrows){\n      \n      city <- city_wise_location[i,1][1]\n      country <- city_wise_location[i,1][2]\n      number <-  city_wise_location[i,2]\n      print(city[[1]])\n      print(country[[1]])\n      print(number)\n      \n      summary_collection$update(query = paste0('{\"city\":\"', city[[1]],'\",\"country\":\"',country[[1]],'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"type\" : \"location\", \"number\": ', number ,'}}'), upsert = TRUE)\n      \n      \n    }\n  }\n}\n\nupdate_loan_payment_data <- function(name) {\n  \n  usercol <- mongo(collection = \"users\", db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  payment_collection_name <- paste(name,\"_payments\",sep=\"\")\n  pay_col <- mongo(collection = payment_collection_name, db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  payments_info <- pay_col$aggregate(\n    '[{\"$match\":{\"type\":\"EMI\" }},{\"$group\":{\"_id\":\"$type\",\"sum_default\": {\"$sum\": \"$default_payment\"}, \"sum_timely\":{\"$sum\":\"$timely_payment\"}}}]'\n  )\n  print(payments_info)\n  nrows <- nrow(payments_info)\n  if(nrows == 1) {\n    ndefaults <- payments_info[1,2]\n    ntimely <- payments_info[1,3]\n    loan_hist_score <- as.integer(ntimely) / (as.integer(ntimely) + as.integer(ndefaults)) * 100\n    print(loan_hist_score)\n    usercol$update(query = paste0('{\"name\":\"', name,'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"loan_history_score\": ', loan_hist_score, '}}'), upsert = TRUE)\n    \n    \n  }\n  \n  \n}\n\nprint_userdb <- function(){\n  users_info <- users$find()\n  print(users_info)\n}\n\nupdate_wallet_repay_score <- function(name) {\n  usercol <- mongo(collection = \"users\", db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  userinfo <- mongo(collection = \"user_info\", db = \"r_db\", url = mongoURLLocal, verbose = TRUE)\n  \n  res <- usercol$aggregate(paste0( '[{\"$match\":{\"name\":\"', name, '\" }},\n           {\"$group\":{\"_id\":{\"name\":\"$name\"}, \"number\": {\"$sum\":1} }}]' ))\n  current_no_of_months <- res[1, \"number\"]\n\n  uinf <- userinfo$find(paste0('{\"name\":\"', name, '\"}'))\n  wallet_balance <- uinf[1, \"wallet_balance\"]\n  \n  print(current_no_of_months)\n  print(wallet_balance)\n  \n\n  if(current_no_of_months == 1) {\n    if(wallet_balance < 0) {\n      repay_score = 0\n    }\n    else {\n      repay_score = 100\n      \n    }\n  }\n  \n  else {\n    previous_no_of_months = current_no_of_months - 1\n    print(previous_no_of_months)\n    #prev_repay <- usercol$find(paste0('{\"no_of_months\" :', previous_no_of_months ,', \"name\" :\"', name, '\"}'))\n    query <- paste0('{\"name\":\"',name,'\"}')\n    prev_repay <- usercol$find(query, sort= '{\"no_of_months\":-1}')\n    prev_repay_score <- prev_repay[2, \"repay_score\"]\n    print(prev_repay_score)\n\n    if(wallet_balance < 0) {\n      paid = 0\n    }\n    else {\n      paid = 1\n    }\n    \n    repay_score = (((prev_repay_score * (current_no_of_months - 1) / 100 ) + paid ) / current_no_of_months ) * 100\n    print(repay_score)\n  }\n  usercol$update(query = paste0('{\"name\":\"', name,'\",\"month\" : ', as.integer(month) , ',\"year\" :', year, '}'), update = paste0('{\"$set\":{\"repay_score\": ', repay_score, ', \"no_of_months\":', current_no_of_months, '}}'), upsert = TRUE)\n  \n}\n\n\n\n\nupdate_all_data <- function() {\n  users_info <- user_names$find()\n  \n  for (i in 1:nrow(users_info)) {\n    name <- users_info[i, \"name\"]\n    twitter_handle <- users_info[i, \"twitter_handle\"]\n    \n    update_finance_credit_debit(name, twitter_handle)\n    update_bank_summary(name)\n    update_banks(name)\n    #update_location_data(name)\n    #update_summary_location_data(name)\n    update_loan_payment_data(name)\n    update_wallet_repay_score (name)\n  }\n}\n\n\nupdate_all_data()\n\n\n\n###########################################Financial data###############################################\n\n\n",
    "created" : 1512299233717.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "913513629",
    "id" : "91A3CB18",
    "lastKnownWriteTime" : 1512308092,
    "last_content_update" : -2147483648,
    "path" : "I:/Skyline Labs/Projects/YHacks 2017/R Facebook/R_YHacks_financial.R",
    "project_path" : "R_YHacks_financial.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}